{
	"info": {
		"_postman_id": "d3b8d646-8652-4e75-9c32-9da1c7fe726b",
		"name": "HW_3_Kisel-Zagoryanskaya",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) необходимо залогиниться\r",
							"//POST\r",
							"//http://162.55.220.72:5005/login\r",
							"//login : str (кроме /)\r",
							"//password : str\r",
							"//Приходящий токен необходимо передать во все остальные запросы.\r",
							"//дальше все запросы требуют наличие токена.\r",
							"\r",
							"//парсим токен в окружение\r",
							"var resp_json = pm.response.json();\r",
							"pm.environment.set(\"token\", resp_json.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"login\" : \"natazag\",\r\n    \"password\" : \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var resp_Json = pm.response.json();\r",
							"var schema = {\r",
							"  \"type\":\"object\",\r",
							"  \"required\": [\"person\",\"qa_salary_after_12_months\",\"qa_salary_after_6_months\",\"start_qa_salary\"],\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\"type\": \"integer\"},\r",
							"        \"u_name\": {\"type\": \"array\",\"items\": \r",
							"          [ {\"type\": \"string\"},\r",
							"            {\"type\": \"integer\"},\r",
							"            {\"type\": \"integer\"}\r",
							"          ]\r",
							"                  },\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"      },\r",
							"      \"required\": [\"u_age\",\"u_name\",\"u_salary_1_5_year\"]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"    \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"    \"start_qa_salary\": {\"type\": \"integer\"}\r",
							"  }};\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var req_Json = JSON.parse(request.data);//request из RAW JSON\r",
							"pm.test(\"salary_start\", function () {\r",
							"    pm.expect(resp_Json.start_qa_salary).to.eql(+(req_Json.salary));\r",
							"});\r",
							"\r",
							"pm.test(\"salary6m\", function () {\r",
							"    pm.expect(resp_Json.qa_salary_after_6_months).to.eql(req_Json.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"salary12m\", function () {\r",
							"    pm.expect(resp_Json.qa_salary_after_12_months).to.eql(req_Json.salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"usalary1.5\", function () {\r",
							"    pm.expect(resp_Json.person.u_salary_1_5_year).to.eql(req_Json.salary*4);\r",
							"});\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"// let vl = {\r",
							"//     url: \"http://162.55.220.72:5005/get_test_user\",\r",
							"//     method: \"POST\",\r",
							"//     body: {mode: \"formdata\",formdata : [\r",
							"//         {key:\"auth_token\", value: pm.environment.get(\"token\"),disabled: false},\r",
							"//         {key:\"name\", value: pm.environment.get(\"name\"),disabled: false},\r",
							"//         {key:\"age\", value: pm.environment.get(\"age\"), disabled: false},\r",
							"//         {key:\"salary\", value: pm.environment.get(\"u_salary_1_5_year\"), disabled: false}]}};\r",
							"\r",
							"//     pm.sendRequest(vl, function () {\r",
							"//         console.log(resp_Json);\r",
							"//     });\r",
							"var u_salary_1_5_year = resp_Json.person.u_salary_1_5_year;\r",
							"//console.log (u_salary_1_5_year)\r",
							"pm.environment.set(\"u_salary_1_5_year\", u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\" : \"{{age}}\",\r\n\"salary\" : \"{{salary}}\",\r\n\"name\" : \"{{name}}\",\r\n\"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var resp_Json = pm.response.json();\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\"age\": {\"type\": \"integer\"},\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"array\",\"items\":[{\"type\": \"integer\"},{\"type\": \"string\"},{\"type\": \"string\"}]\r",
							"    }},\r",
							"  \"required\": [\"age\",\"name\",\"salary\"]\r",
							"}\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var req_Json = request.data;\r",
							"\r",
							"pm.test(\"1000\", function () {\r",
							"    pm.expect(resp_Json.salary[0]).to.eql(Number(req_Json.salary));\r",
							"});\r",
							"\r",
							"pm.test(\"2000\", function () {\r",
							"    pm.expect(Number(resp_Json.salary[1])).to.eql(req_Json.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"3000\", function () {\r",
							"    pm.expect(Number(resp_Json.salary[2])).to.eql(req_Json.salary*3);\r",
							"});\r",
							"\r",
							"pm.test(\"3000\", function () {\r",
							"    pm.expect(Number(resp_Json.salary[2])).to.eql(req_Json.salary*3);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"if (resp_Json.salary[2]>resp_Json.salary[1] && resp_Json.salary[2]>resp_Json.salary[0]){\r",
							"    pm.test(\"Salary_[2] is the bigger one\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var resp_Json = pm.response.json();\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"age\", \"daily_food\",\"name\"],\r",
							"    \"properties\":{\r",
							"        \"age\":{\"type\":\"integer\"},\r",
							"        \"name\":{\"type\":\"string\"},\r",
							"        \"daily_food\":{\"type\": \"number\"},\r",
							"        \"daily_sleep\":{\"type\":\"number\"}\r",
							"    }\r",
							"}\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var resp_JSON = pm.response.json();\r",
							"var req_JSON = request.data;\r",
							"\r",
							"pm.test(\"weight 0.012\", function () {\r",
							"    pm.expect(resp_JSON.daily_food).to.eql(req_JSON.weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"weight 2.5\", function () {\r",
							"    pm.expect(resp_JSON.daily_sleep).to.eql(req_JSON.weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "5",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Jack",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "14",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp_Json = pm.response.json();\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var req_Json = request.data;\r",
							"var env_name = pm.environment.get(\"name\");\r",
							"pm.test(\"Req_name is Env_name\", function () {\r",
							"    pm.expect(req_Json.name).to.eql(env_name);\r",
							"});\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Resp_age is Req_age\", function () {\r",
							"    pm.expect(resp_Json.age).to.eql(req_Json.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}\n",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*6) http://162.55.220.72:5005/currency\r",
							"req.\r",
							"POST\r",
							"auth_token\r",
							"\r",
							"Resp. Передаётся список массив объектов.\r",
							"[\r",
							"{\"Cur_Abbreviation\": str,\r",
							" \"Cur_ID\": int,\r",
							" \"Cur_Name\": str\r",
							"}\r",
							"…\r",
							"{\"Cur_Abbreviation\": str,\r",
							" \"Cur_ID\": int,\r",
							" \"Cur_Name\": str\r",
							"}\r",
							"]\r",
							"*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"var resp_Json = pm.response.json();\r",
							"var rand_carr = Math.floor(Math.random()*resp_Json.length);\r",
							"console.log(rand_carr);\r",
							"\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"pm.environment.set(\"Cur_ID\", rand_carr);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code==200) {\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var resp_Json = pm.response.json();\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"    \"Cur_ID\": {\"type\": \"integer\"},\r",
							"    \"Cur_Name\": {\"type\": \"string\"},\r",
							"    \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"    \"Cur_Scale\": {\"type\": \"integer\"},\r",
							"    \"Date\": {\"type\": \"string\"}},\r",
							"  \"required\": [\"Cur_Abbreviation\",\"Cur_ID\",\"Cur_Name\",\"Cur_OfficialRate\",\"Cur_Scale\",\"Date\"]}\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							" });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code is 500\", function () {\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}